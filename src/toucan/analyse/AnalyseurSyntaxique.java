
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Dec 13 12:08:08 CET 2018
//----------------------------------------------------

package toucan.analyse;

import java_cup.runtime.*;
import toucan.arbre.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Dec 13 12:08:08 CET 2018
  */
public class AnalyseurSyntaxique extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalyseurSyntaxique() {super();}

  /** Constructor which sets the default scanner. */
  public AnalyseurSyntaxique(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalyseurSyntaxique(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\060\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\016\003\000" +
    "\002\016\003\000\002\017\022\000\002\017\022\000\002" +
    "\017\023\000\002\017\023\000\002\017\025\000\002\017" +
    "\025\000\002\020\013\000\002\020\013\000\002\020\013" +
    "\000\002\020\013\000\002\012\003\000\002\013\003\000" +
    "\002\013\004\000\002\014\013\000\002\014\015\000\002" +
    "\014\015\000\002\014\017\000\002\015\006\000\002\011" +
    "\003\000\002\010\006\000\002\010\006\000\002\010\010" +
    "\000\002\010\010\000\002\010\006\000\002\010\010\000" +
    "\002\006\003\000\002\007\004\000\002\007\007\000\002" +
    "\004\004\000\002\021\003\000\002\021\003\000\002\022" +
    "\003\000\002\022\003\000\002\023\005\000\002\023\005" +
    "\000\002\024\005\000\002\024\005\000\002\024\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\264\000\020\007\005\013\031\015\021\016\023\017" +
    "\004\020\010\021\024\001\002\000\004\020\263\001\002" +
    "\000\006\020\247\021\024\001\002\000\004\006\243\001" +
    "\002\000\024\002\ufffb\007\ufffb\012\ufffb\013\ufffb\015\ufffb" +
    "\016\ufffb\017\ufffb\020\ufffb\021\ufffb\001\002\000\004\006" +
    "\236\001\002\000\022\002\000\007\005\013\031\015\021" +
    "\016\023\017\004\020\010\021\024\001\002\000\024\002" +
    "\uffde\007\uffde\012\uffde\013\uffde\015\uffde\016\uffde\017\uffde" +
    "\020\uffde\021\uffde\001\002\000\024\002\ufff9\007\ufff9\012" +
    "\ufff9\013\ufff9\015\ufff9\016\ufff9\017\ufff9\020\ufff9\021\ufff9" +
    "\001\002\000\004\004\234\001\002\000\022\002\ufffe\007" +
    "\ufffe\013\ufffe\015\ufffe\016\ufffe\017\ufffe\020\ufffe\021\ufffe" +
    "\001\002\000\024\002\ufffd\007\ufffd\012\ufffd\013\ufffd\015" +
    "\ufffd\016\ufffd\017\ufffd\020\ufffd\021\ufffd\001\002\000\004" +
    "\002\233\001\002\000\024\002\uffed\007\uffed\012\uffed\013" +
    "\uffed\015\uffed\016\uffed\017\uffed\020\uffed\021\uffed\001\002" +
    "\000\004\007\142\001\002\000\024\002\uffe5\007\uffe5\012" +
    "\uffe5\013\uffe5\015\uffe5\016\uffe5\017\uffe5\020\uffe5\021\uffe5" +
    "\001\002\000\004\007\111\001\002\000\010\007\076\020" +
    "\035\023\033\001\002\000\024\002\ufff8\007\ufff8\012\ufff8" +
    "\013\ufff8\015\ufff8\016\ufff8\017\ufff8\020\ufff8\021\ufff8\001" +
    "\002\000\026\002\uffec\007\uffec\012\uffec\013\uffec\014\070" +
    "\015\uffec\016\uffec\017\uffec\020\uffec\021\uffec\001\002\000" +
    "\024\002\ufffa\007\ufffa\012\ufffa\013\ufffa\015\ufffa\016\ufffa" +
    "\017\ufffa\020\ufffa\021\ufffa\001\002\000\024\002\ufffc\007" +
    "\ufffc\012\ufffc\013\ufffc\015\ufffc\016\ufffc\017\ufffc\020\ufffc" +
    "\021\ufffc\001\002\000\004\007\032\001\002\000\006\020" +
    "\035\023\033\001\002\000\014\004\uffda\005\uffda\010\uffda" +
    "\022\uffda\024\uffda\001\002\000\006\022\037\024\036\001" +
    "\002\000\014\004\uffd9\005\uffd9\010\uffd9\022\uffd9\024\uffd9" +
    "\001\002\000\006\020\035\023\033\001\002\000\006\020" +
    "\035\023\033\001\002\000\006\010\042\024\041\001\002" +
    "\000\006\020\035\023\033\001\002\000\004\011\043\001" +
    "\002\000\020\007\005\013\031\015\021\016\023\017\004" +
    "\020\010\021\024\001\002\000\004\012\045\001\002\000" +
    "\026\002\uffea\007\uffea\012\uffea\013\uffea\014\uffea\015\uffea" +
    "\016\uffea\017\uffea\020\uffea\021\uffea\001\002\000\004\010" +
    "\047\001\002\000\004\011\050\001\002\000\020\007\005" +
    "\013\031\015\021\016\023\017\004\020\010\021\024\001" +
    "\002\000\004\012\052\001\002\000\026\002\uffe8\007\uffe8" +
    "\012\uffe8\013\uffe8\014\uffe8\015\uffe8\016\uffe8\017\uffe8\020" +
    "\uffe8\021\uffe8\001\002\000\004\022\054\001\002\000\006" +
    "\020\035\023\033\001\002\000\006\010\057\024\056\001" +
    "\002\000\006\020\035\023\033\001\002\000\004\011\060" +
    "\001\002\000\020\007\005\013\031\015\021\016\023\017" +
    "\004\020\010\021\024\001\002\000\004\012\062\001\002" +
    "\000\026\002\uffe9\007\uffe9\012\uffe9\013\uffe9\014\uffe9\015" +
    "\uffe9\016\uffe9\017\uffe9\020\uffe9\021\uffe9\001\002\000\004" +
    "\010\064\001\002\000\004\011\065\001\002\000\020\007" +
    "\005\013\031\015\021\016\023\017\004\020\010\021\024" +
    "\001\002\000\004\012\067\001\002\000\026\002\uffe7\007" +
    "\uffe7\012\uffe7\013\uffe7\014\uffe7\015\uffe7\016\uffe7\017\uffe7" +
    "\020\uffe7\021\uffe7\001\002\000\004\011\072\001\002\000" +
    "\024\002\uffeb\007\uffeb\012\uffeb\013\uffeb\015\uffeb\016\uffeb" +
    "\017\uffeb\020\uffeb\021\uffeb\001\002\000\020\007\005\013" +
    "\031\015\021\016\023\017\004\020\010\021\024\001\002" +
    "\000\004\012\074\001\002\000\024\002\uffe6\007\uffe6\012" +
    "\uffe6\013\uffe6\015\uffe6\016\uffe6\017\uffe6\020\uffe6\021\uffe6" +
    "\001\002\000\006\005\110\024\105\001\002\000\010\007" +
    "\076\020\035\023\033\001\002\000\006\005\101\024\100" +
    "\001\002\000\006\020\035\023\033\001\002\000\014\004" +
    "\uffd6\006\uffd6\007\uffd6\022\uffd6\025\uffd6\001\002\000\014" +
    "\004\uffd3\005\uffd3\010\uffd3\022\uffd3\024\uffd3\001\002\000" +
    "\006\010\106\024\105\001\002\000\004\024\100\001\002" +
    "\000\006\020\035\023\033\001\002\000\014\004\uffd2\005" +
    "\uffd2\010\uffd2\022\uffd2\024\uffd2\001\002\000\014\004\uffd4" +
    "\005\uffd4\010\uffd4\022\uffd4\024\uffd4\001\002\000\014\004" +
    "\uffd5\006\uffd5\007\uffd5\022\uffd5\025\uffd5\001\002\000\010" +
    "\007\076\020\035\023\033\001\002\000\006\022\127\024" +
    "\105\001\002\000\006\022\114\024\100\001\002\000\010" +
    "\007\076\020\035\023\033\001\002\000\006\010\123\024" +
    "\105\001\002\000\006\010\117\024\100\001\002\000\004" +
    "\011\120\001\002\000\020\007\005\013\031\015\021\016" +
    "\023\017\004\020\010\021\024\001\002\000\004\012\122" +
    "\001\002\000\024\002\ufff1\007\ufff1\012\ufff1\013\ufff1\015" +
    "\ufff1\016\ufff1\017\ufff1\020\ufff1\021\ufff1\001\002\000\004" +
    "\011\124\001\002\000\020\007\005\013\031\015\021\016" +
    "\023\017\004\020\010\021\024\001\002\000\004\012\126" +
    "\001\002\000\024\002\uffef\007\uffef\012\uffef\013\uffef\015" +
    "\uffef\016\uffef\017\uffef\020\uffef\021\uffef\001\002\000\010" +
    "\007\076\020\035\023\033\001\002\000\006\010\136\024" +
    "\105\001\002\000\006\010\132\024\100\001\002\000\004" +
    "\011\133\001\002\000\020\007\005\013\031\015\021\016" +
    "\023\017\004\020\010\021\024\001\002\000\004\012\135" +
    "\001\002\000\024\002\ufff0\007\ufff0\012\ufff0\013\ufff0\015" +
    "\ufff0\016\ufff0\017\ufff0\020\ufff0\021\ufff0\001\002\000\004" +
    "\011\137\001\002\000\020\007\005\013\031\015\021\016" +
    "\023\017\004\020\010\021\024\001\002\000\004\012\141" +
    "\001\002\000\024\002\uffee\007\uffee\012\uffee\013\uffee\015" +
    "\uffee\016\uffee\017\uffee\020\uffee\021\uffee\001\002\000\010" +
    "\017\144\020\147\021\024\001\002\000\004\006\202\001" +
    "\002\000\004\020\201\001\002\000\010\006\uffd7\022\uffd7" +
    "\025\uffd7\001\002\000\004\006\150\001\002\000\010\006" +
    "\uffd8\022\uffd8\025\uffd8\001\002\000\006\020\035\023\033" +
    "\001\002\000\004\004\152\001\002\000\006\020\147\021" +
    "\024\001\002\000\004\022\154\001\002\000\006\020\035" +
    "\023\033\001\002\000\004\004\156\001\002\000\006\020" +
    "\147\021\024\001\002\000\006\006\160\025\161\001\002" +
    "\000\006\020\035\023\033\001\002\000\004\010\162\001" +
    "\002\000\004\011\163\001\002\000\020\007\005\013\031" +
    "\015\021\016\023\017\004\020\010\021\024\001\002\000" +
    "\004\012\165\001\002\000\024\002\ufff6\007\ufff6\012\ufff6" +
    "\013\ufff6\015\ufff6\016\ufff6\017\ufff6\020\ufff6\021\ufff6\001" +
    "\002\000\006\010\170\024\167\001\002\000\006\020\035" +
    "\023\033\001\002\000\004\011\171\001\002\000\020\007" +
    "\005\013\031\015\021\016\023\017\004\020\010\021\024" +
    "\001\002\000\004\012\173\001\002\000\024\002\ufff4\007" +
    "\ufff4\012\ufff4\013\ufff4\015\ufff4\016\ufff4\017\ufff4\020\ufff4" +
    "\021\ufff4\001\002\000\004\010\175\001\002\000\004\011" +
    "\176\001\002\000\020\007\005\013\031\015\021\016\023" +
    "\017\004\020\010\021\024\001\002\000\004\012\200\001" +
    "\002\000\024\002\ufff2\007\ufff2\012\ufff2\013\ufff2\015\ufff2" +
    "\016\ufff2\017\ufff2\020\ufff2\021\ufff2\001\002\000\004\006" +
    "\uffdb\001\002\000\006\020\035\023\033\001\002\000\004" +
    "\004\204\001\002\000\006\020\147\021\024\001\002\000" +
    "\004\022\206\001\002\000\006\020\035\023\033\001\002" +
    "\000\004\004\210\001\002\000\006\020\147\021\024\001" +
    "\002\000\006\006\212\025\213\001\002\000\006\020\035" +
    "\023\033\001\002\000\004\010\214\001\002\000\004\011" +
    "\215\001\002\000\020\007\005\013\031\015\021\016\023" +
    "\017\004\020\010\021\024\001\002\000\004\012\217\001" +
    "\002\000\024\002\ufff7\007\ufff7\012\ufff7\013\ufff7\015\ufff7" +
    "\016\ufff7\017\ufff7\020\ufff7\021\ufff7\001\002\000\006\010" +
    "\222\024\221\001\002\000\006\020\035\023\033\001\002" +
    "\000\004\011\223\001\002\000\020\007\005\013\031\015" +
    "\021\016\023\017\004\020\010\021\024\001\002\000\004" +
    "\012\225\001\002\000\024\002\ufff5\007\ufff5\012\ufff5\013" +
    "\ufff5\015\ufff5\016\ufff5\017\ufff5\020\ufff5\021\ufff5\001\002" +
    "\000\004\010\227\001\002\000\004\011\230\001\002\000" +
    "\020\007\005\013\031\015\021\016\023\017\004\020\010" +
    "\021\024\001\002\000\004\012\232\001\002\000\024\002" +
    "\ufff3\007\ufff3\012\ufff3\013\ufff3\015\ufff3\016\ufff3\017\ufff3" +
    "\020\ufff3\021\ufff3\001\002\000\004\002\001\001\002\000" +
    "\024\002\uffdd\007\uffdd\012\uffdd\013\uffdd\015\uffdd\016\uffdd" +
    "\017\uffdd\020\uffdd\021\uffdd\001\002\000\022\002\uffff\007" +
    "\uffff\013\uffff\015\uffff\016\uffff\017\uffff\020\uffff\021\uffff" +
    "\001\002\000\010\007\076\020\035\023\033\001\002\000" +
    "\006\004\242\024\105\001\002\000\006\004\241\024\100" +
    "\001\002\000\024\002\uffe4\007\uffe4\012\uffe4\013\uffe4\015" +
    "\uffe4\016\uffe4\017\uffe4\020\uffe4\021\uffe4\001\002\000\024" +
    "\002\uffe0\007\uffe0\012\uffe0\013\uffe0\015\uffe0\016\uffe0\017" +
    "\uffe0\020\uffe0\021\uffe0\001\002\000\004\021\024\001\002" +
    "\000\004\004\245\001\002\000\024\002\uffe3\007\uffe3\012" +
    "\uffe3\013\uffe3\015\uffe3\016\uffe3\017\uffe3\020\uffe3\021\uffe3" +
    "\001\002\000\004\006\257\001\002\000\004\006\250\001" +
    "\002\000\010\007\076\020\035\023\033\001\002\000\006" +
    "\010\255\024\105\001\002\000\006\010\253\024\100\001" +
    "\002\000\004\004\254\001\002\000\024\002\uffe2\007\uffe2" +
    "\012\uffe2\013\uffe2\015\uffe2\016\uffe2\017\uffe2\020\uffe2\021" +
    "\uffe2\001\002\000\004\004\256\001\002\000\024\002\uffdf" +
    "\007\uffdf\012\uffdf\013\uffdf\015\uffdf\016\uffdf\017\uffdf\020" +
    "\uffdf\021\uffdf\001\002\000\004\021\024\001\002\000\004" +
    "\007\261\001\002\000\004\004\262\001\002\000\024\002" +
    "\uffe1\007\uffe1\012\uffe1\013\uffe1\015\uffe1\016\uffe1\017\uffe1" +
    "\020\uffe1\021\uffe1\001\002\000\006\004\uffdb\006\264\001" +
    "\002\000\006\020\035\023\033\001\002\000\004\004\266" +
    "\001\002\000\024\002\uffdc\007\uffdc\012\uffdc\013\uffdc\015" +
    "\uffdc\016\uffdc\017\uffdc\020\uffdc\021\uffdc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\264\000\040\002\016\003\010\004\013\005\014\006" +
    "\015\007\011\010\021\011\027\012\026\013\017\014\025" +
    "\016\006\017\012\020\024\023\005\001\001\000\002\001" +
    "\001\000\004\023\245\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\004\013\005\234\006" +
    "\015\007\011\010\021\011\027\012\026\013\017\014\025" +
    "\016\006\017\012\020\024\023\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\021\076\024\074\001\001\000\002\001\001\000\004\015" +
    "\070\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\021\033\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\021\052\001\001" +
    "\000\004\021\037\001\001\000\002\001\001\000\004\021" +
    "\045\001\001\000\002\001\001\000\034\004\013\005\043" +
    "\006\015\007\011\010\021\011\027\012\026\013\017\014" +
    "\025\016\006\017\012\020\024\023\005\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\004\013\005\050\006\015\007\011\010\021" +
    "\011\027\012\026\013\017\014\025\016\006\017\012\020" +
    "\024\023\005\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\054\001\001\000\002\001" +
    "\001\000\004\021\062\001\001\000\002\001\001\000\034" +
    "\004\013\005\060\006\015\007\011\010\021\011\027\012" +
    "\026\013\017\014\025\016\006\017\012\020\024\023\005" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\004\013\005\065\006\015" +
    "\007\011\010\021\011\027\012\026\013\017\014\025\016" +
    "\006\017\012\020\024\023\005\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\004\013\005\072\006\015\007\011\010\021\011\027" +
    "\012\026\013\017\014\025\016\006\017\012\020\024\023" +
    "\005\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\021\103\024\102\001\001\000\002\001" +
    "\001\000\004\021\101\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\021" +
    "\106\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\021\112\024\111\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\021\115\024\114\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\004\013\005\120\006\015\007\011\010\021\011\027" +
    "\012\026\013\017\014\025\016\006\017\012\020\024\023" +
    "\005\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\004\013\005\124\006\015\007\011\010" +
    "\021\011\027\012\026\013\017\014\025\016\006\017\012" +
    "\020\024\023\005\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\021\130\024\127\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\004\013\005" +
    "\133\006\015\007\011\010\021\011\027\012\026\013\017" +
    "\014\025\016\006\017\012\020\024\023\005\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\004\013\005\137\006\015\007\011\010\021\011\027\012" +
    "\026\013\017\014\025\016\006\017\012\020\024\023\005" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\004" +
    "\145\022\142\023\144\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\021\150\001\001\000\002\001\001\000\006" +
    "\022\152\023\144\001\001\000\002\001\001\000\004\021" +
    "\154\001\001\000\002\001\001\000\006\022\156\023\144" +
    "\001\001\000\002\001\001\000\004\021\165\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\004\013\005\163" +
    "\006\015\007\011\010\021\011\027\012\026\013\017\014" +
    "\025\016\006\017\012\020\024\023\005\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\021" +
    "\173\001\001\000\002\001\001\000\034\004\013\005\171" +
    "\006\015\007\011\010\021\011\027\012\026\013\017\014" +
    "\025\016\006\017\012\020\024\023\005\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\004\013\005\176\006\015\007\011\010\021" +
    "\011\027\012\026\013\017\014\025\016\006\017\012\020" +
    "\024\023\005\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\202\001\001\000\002\001" +
    "\001\000\006\022\204\023\144\001\001\000\002\001\001" +
    "\000\004\021\206\001\001\000\002\001\001\000\006\022" +
    "\210\023\144\001\001\000\002\001\001\000\004\021\217" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\004" +
    "\013\005\215\006\015\007\011\010\021\011\027\012\026" +
    "\013\017\014\025\016\006\017\012\020\024\023\005\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\021\225\001\001\000\002\001\001\000\034\004" +
    "\013\005\223\006\015\007\011\010\021\011\027\012\026" +
    "\013\017\014\025\016\006\017\012\020\024\023\005\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\004\013\005\230\006\015\007" +
    "\011\010\021\011\027\012\026\013\017\014\025\016\006" +
    "\017\012\020\024\023\005\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\021\237\024\236\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\243\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\021\251" +
    "\024\250\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\023\257\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\021\264\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalyseurSyntaxique$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalyseurSyntaxique$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalyseurSyntaxique$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    /* Change the method report_error so it will display the line and column of where the error
       occurred in the input as well as the reason for the error which is passed into the method
       in the String 'message'. */
    public void report_error(String message, Object info) {
   
        /* Create a StringBuffer called 'm' with the string 'Error' in it. */
        StringBuffer m = new StringBuffer("Error");
   
        /* Check if the information passed to the method is the same type as the type 
           java_cup.runtime.Symbol. */
        if (info instanceof java_cup.runtime.Symbol) {
            /* Declare a java_cup.runtime.Symbol object 's' with the information in the object 
               info that is being typecasted as a java_cup.runtime.Symbol object. */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
            /* Check if the line number in the input is greater or equal to zero. */
            if (s.left >= 0) {                
                /* Add to the end of the StringBuffer error message the line number of the error 
                   in the input. */
                m.append(" in line "+(s.left+1));   
                /* Check if the column number in the input is greater or equal to zero. */
                if (s.right >= 0)                    
                    /* Add to the end of the StringBuffer error message the column number of the 
                       error in the input. */
                    m.append(", column "+(s.right+1));
            }
        }
        /* Add to the end of the StringBuffer error message created in this method the message that
           was passed into this method. */
        m.append(" : "+message);
   
        /* Print the contents of the StringBuffer 'm', which contains an error message, out on 
           a line. */
        System.err.println(m);
    }
    /* Change the method report_fatal_error so when it reports a fatal error it will display the 
       line and column number of where the fatal error occurred in the input as well as the reason
       for the fatal error which is passed into the method in the object 'message' and then exit.*/
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalyseurSyntaxique$actions {

 /* vide pour le moment */
	    
  private final AnalyseurSyntaxique parser;

  /** Constructor */
  CUP$AnalyseurSyntaxique$actions(AnalyseurSyntaxique parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AnalyseurSyntaxique$do_action(
    int                        CUP$AnalyseurSyntaxique$act_num,
    java_cup.runtime.lr_parser CUP$AnalyseurSyntaxique$parser,
    java.util.Stack            CUP$AnalyseurSyntaxique$stack,
    int                        CUP$AnalyseurSyntaxique$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalyseurSyntaxique$result;

      /* select the action based on the action number */
      switch (CUP$AnalyseurSyntaxique$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // OPER ::= PARENTHESEOUVR OPER PARENTHESEFERM 
            {
              String RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).value;
		
            RESULT =  "(" + op + ")";
        
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("OPER",18, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OPER ::= VORC OPERATION VORC 
            {
              String RESULT =null;
		int vgleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)).left;
		int vgright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)).right;
		String vg = (String)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)).value;
		int operleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).left;
		int operright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).right;
		String oper = (String)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).value;
		int vdleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).right;
		String vd = (String)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.peek()).value;
		
            RESULT = vg + oper + vd ;
        
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("OPER",18, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OPER ::= OPER OPERATION VORC 
            {
              String RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)).value;
		int operleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).left;
		int operright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).right;
		String oper = (String)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.peek()).value;
		
            RESULT = op + oper + v ;
        
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("OPER",18, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // TABL ::= TABOUVRIR OPER TABFERMER 
            {
              String RESULT =null;
		int toleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)).left;
		int toright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)).right;
		String to = (String)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).value;
		
           RESULT = to + op + "]" ;
        
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("TABL",17, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // TABL ::= TABOUVRIR VORC TABFERMER 
            {
              String RESULT =null;
		int toleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)).left;
		int toright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)).right;
		String to = (String)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).value;
		
           RESULT = to + v + "]";
        
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("TABL",17, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // VORT ::= TABL 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.peek()).value;
		
            RESULT = t ;
        
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("VORT",16, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // VORT ::= VARIABLE 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.peek()).value;
		
            RESULT = v ;
        
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("VORT",16, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // VORC ::= VARIABLE 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.peek()).value;
		
            RESULT = v ;
        
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("VORC",15, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // VORC ::= CONSTANTE 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.peek()).value;
		
           RESULT = c ;
        
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("VORC",15, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DECL ::= TYPEVAR VARIABLE 
            {
              Instruction RESULT =null;
		int tyleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).right;
		String ty = (String)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.peek()).value;
		
            Instruction ins = new Declaration(ty, var);
            RESULT = ins;
        
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("DECL",2, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // LDECL ::= TYPEVAR VARIABLE EGALE VORC POINTVIRGULE 
            {
              Instruction RESULT =null;
		int tyleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-4)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-4)).right;
		String ty = (String)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-4)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-3)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).value;
		
            Instruction ins = new DeclarationAvecAffectation(ty, var, v);
            RESULT = ins;
        
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("LDECL",5, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-4)), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // LDECL ::= DECL POINTVIRGULE 
            {
              Instruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).right;
		Instruction i = (Instruction)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).value;
		
            RESULT = i ;
        
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("LDECL",5, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ATDECL ::= LDECL 
            {
              Instruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).right;
		Instruction i = (Instruction)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.peek()).value;
		
            RESULT = i ;
        
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("ATDECL",4, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // AFFC ::= PARENTHESEOUVR VARIABLE EGALE OPER PARENTHESEFERM POINTVIRGULE 
            {
              Instruction RESULT =null;
		int opgleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-4)).left;
		int opgright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-4)).right;
		String opg = (String)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-4)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)).right;
		String opd = (String)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)).value;
		
                        Instruction ins = new AffectationSimple("("+opg, opd+")");
                        RESULT = ins;
                    
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("AFFC",6, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-5)), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // AFFC ::= VARIABLE EGALE OPER POINTVIRGULE 
            {
              Instruction RESULT =null;
		int opgleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-3)).left;
		int opgright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-3)).right;
		String opg = (String)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-3)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).right;
		String opd = (String)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).value;
		
                            Instruction ins = new AffectationSimple(opg, opd);
                            RESULT = ins;
                        
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("AFFC",6, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-3)), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // AFFC ::= PARENTHESEOUVR TABL EGALE TABL PARENTHESEOUVR POINTVIRGULE 
            {
              Instruction RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-5)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-5)).right;
		Symbol x = (Symbol)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-5)).value;
		int opgleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-4)).left;
		int opgright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-4)).right;
		String opg = (String)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-4)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)).right;
		String opd = (String)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).right;
		Symbol y = (Symbol)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).value;
		
                Instruction ins = new AffectationCaseCaseVarTemp(x+opg, opd+y, true);
                RESULT = ins;
            
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("AFFC",6, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-5)), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // AFFC ::= PARENTHESEOUVR VARIABLE EGALE VORC PARENTHESEFERM POINTVIRGULE 
            {
              Instruction RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-5)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-5)).right;
		Symbol x = (Symbol)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-5)).value;
		int opgleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-4)).left;
		int opgright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-4)).right;
		String opg = (String)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-4)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)).right;
		String opd = (String)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).right;
		Symbol y = (Symbol)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).value;
		
            Instruction ins = new AffectationSimple(x+opg, opd+y);
            RESULT = ins;
        
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("AFFC",6, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-5)), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // AFFC ::= TABL EGALE TABL POINTVIRGULE 
            {
              Instruction RESULT =null;
		int opgleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-3)).left;
		int opgright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-3)).right;
		String opg = (String)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-3)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).right;
		String opd = (String)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).value;
		
            Instruction ins = new AffectationCaseCaseVarTemp(opg, opd, true);
            RESULT = ins;
        
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("AFFC",6, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-3)), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // AFFC ::= VARIABLE EGALE VORC POINTVIRGULE 
            {
              Instruction RESULT =null;
		int opgleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-3)).left;
		int opgright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-3)).right;
		String opg = (String)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-3)).value;
		int opdleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).left;
		int opdright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).right;
		String opd = (String)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).value;
		
            Instruction ins = new AffectationSimple(opg, opd);
            RESULT = ins;
        
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("AFFC",6, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-3)), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ATAFFC ::= AFFC 
            {
              Instruction RESULT =null;
		int afleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).left;
		int afright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).right;
		Instruction af = (Instruction)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.peek()).value;
		
           RESULT = af;
        
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("ATAFFC",7, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CONDEL ::= CONDITIONNELLEELSE BRACKETOUVR INST BRACKETFERM 
            {
              Instruction RESULT =null;

              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("CONDEL",11, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-3)), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CONDIF ::= CONDITIONNELLEIF PARENTHESEOUVR VORC OPERATION VORC COMPARATEUR VORC OPERATION VORC PARENTHESEFERM BRACKETOUVR INST BRACKETFERM 
            {
              Instruction RESULT =null;

              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("CONDIF",10, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-12)), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CONDIF ::= CONDITIONNELLEIF PARENTHESEOUVR VORC COMPARATEUR VORC OPERATION VORC PARENTHESEFERM BRACKETOUVR INST BRACKETFERM 
            {
              Instruction RESULT =null;

              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("CONDIF",10, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-10)), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CONDIF ::= CONDITIONNELLEIF PARENTHESEOUVR VORC OPERATION VORC COMPARATEUR VORC PARENTHESEFERM BRACKETOUVR INST BRACKETFERM 
            {
              Instruction RESULT =null;

              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("CONDIF",10, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-10)), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CONDIF ::= CONDITIONNELLEIF PARENTHESEOUVR VORC COMPARATEUR VORC PARENTHESEFERM BRACKETOUVR INST BRACKETFERM 
            {
              Instruction RESULT =null;

              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("CONDIF",10, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-8)), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // COND ::= CONDIF CONDEL 
            {
              Instruction RESULT =null;

              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("COND",9, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // COND ::= CONDIF 
            {
              Instruction RESULT =null;

              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("COND",9, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ATCOND ::= COND 
            {
              Instruction RESULT =null;

              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("ATCOND",8, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // WLOOP ::= BOUCLEWHILE PARENTHESEOUVR OPER COMPARATEUR OPER PARENTHESEFERM BRACKETOUVR INST BRACKETFERM 
            {
              Instruction RESULT =null;

              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("WLOOP",14, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-8)), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // WLOOP ::= BOUCLEWHILE PARENTHESEOUVR VORC COMPARATEUR OPER PARENTHESEFERM BRACKETOUVR INST BRACKETFERM 
            {
              Instruction RESULT =null;

              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("WLOOP",14, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-8)), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // WLOOP ::= BOUCLEWHILE PARENTHESEOUVR OPER COMPARATEUR VORC PARENTHESEFERM BRACKETOUVR INST BRACKETFERM 
            {
              Instruction RESULT =null;

              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("WLOOP",14, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-8)), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // WLOOP ::= BOUCLEWHILE PARENTHESEOUVR VORC COMPARATEUR VORC PARENTHESEFERM BRACKETOUVR INST BRACKETFERM 
            {
              Instruction RESULT =null;

              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("WLOOP",14, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-8)), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // FLOOP ::= BOUCLEFOR PARENTHESEOUVR DECL EGALE VORC POINTVIRGULE VORT COMPARATEUR VORC POINTVIRGULE VORT EGALE VORC OPERATION VORC PARENTHESEFERM BRACKETOUVR INST BRACKETFERM 
            {
              Instruction RESULT =null;

              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("FLOOP",13, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-18)), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // FLOOP ::= BOUCLEFOR PARENTHESEOUVR VORT EGALE VORC POINTVIRGULE VORT COMPARATEUR VORC POINTVIRGULE VORT EGALE VORC OPERATION VORC PARENTHESEFERM BRACKETOUVR INST BRACKETFERM 
            {
              Instruction RESULT =null;

              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("FLOOP",13, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-18)), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // FLOOP ::= BOUCLEFOR PARENTHESEOUVR DECL EGALE VORC POINTVIRGULE VORT COMPARATEUR VORC POINTVIRGULE VORT EGALE VORC PARENTHESEFERM BRACKETOUVR INST BRACKETFERM 
            {
              Instruction RESULT =null;

              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("FLOOP",13, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-16)), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // FLOOP ::= BOUCLEFOR PARENTHESEOUVR VORT EGALE VORC POINTVIRGULE VORT COMPARATEUR VORC POINTVIRGULE VORT EGALE VORC PARENTHESEFERM BRACKETOUVR INST BRACKETFERM 
            {
              Instruction RESULT =null;

              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("FLOOP",13, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-16)), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // FLOOP ::= BOUCLEFOR PARENTHESEOUVR DECL EGALE VORC POINTVIRGULE VORT COMPARATEUR VORC POINTVIRGULE VORT OPERAPIDE PARENTHESEFERM BRACKETOUVR INST BRACKETFERM 
            {
              Instruction RESULT =null;

              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("FLOOP",13, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-15)), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // FLOOP ::= BOUCLEFOR PARENTHESEOUVR VORT EGALE VORC POINTVIRGULE VORT COMPARATEUR VORC POINTVIRGULE VORT OPERAPIDE PARENTHESEFERM BRACKETOUVR INST BRACKETFERM 
            {
              Instruction RESULT =null;

              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("FLOOP",13, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-15)), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ATLOOP ::= WLOOP 
            {
              Instruction RESULT =null;

              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("ATLOOP",12, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ATLOOP ::= FLOOP 
            {
              Instruction RESULT =null;

              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("ATLOOP",12, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INST ::= ATCOND 
            {
              Instruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).right;
		Instruction i = (Instruction)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.peek()).value;
		
            RESULT = i ;
        
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("INST",3, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INST ::= ATLOOP 
            {
              Instruction RESULT =null;

              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("INST",3, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INST ::= ATAFFC 
            {
              Instruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).right;
		Instruction i = (Instruction)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.peek()).value;
		
            RESULT = i ;
         
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("INST",3, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INST ::= ATDECL 
            {
              Instruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).right;
		Instruction i = (Instruction)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.peek()).value;
		
            RESULT = i ;
        
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("INST",3, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LINST ::= INST 
            {
              BlocDInstructions RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).right;
		Instruction i = (Instruction)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.peek()).value;
		  BlocDInstructions li = new BlocDInstructions() ;
            li.ajouter(i) ;
            RESULT = li ;
        
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("LINST",1, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // LINST ::= LINST INST 
            {
              BlocDInstructions RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).right;
		BlocDInstructions li = (BlocDInstructions)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).right;
		Instruction i = (Instruction)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.peek()).value;
		  li.ajouter(i) ;
            RESULT = li ;
        
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("LINST",1, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // PROG ::= LINST 
            {
              ArbreAbstrait RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()).right;
		BlocDInstructions li = (BlocDInstructions)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.peek()).value;
		 RESULT = li ; 
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("PROG",0, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          return CUP$AnalyseurSyntaxique$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PROG EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).right;
		ArbreAbstrait start_val = (ArbreAbstrait)((java_cup.runtime.Symbol) CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)).value;
		RESULT = start_val;
              CUP$AnalyseurSyntaxique$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.elementAt(CUP$AnalyseurSyntaxique$top-1)), ((java_cup.runtime.Symbol)CUP$AnalyseurSyntaxique$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalyseurSyntaxique$parser.done_parsing();
          return CUP$AnalyseurSyntaxique$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

