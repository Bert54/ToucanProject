@startuml

package "arbre" {
  
  abstract class Affectation extends Instruction {
  }
  
  class AffectationCaseCaseVarTemp {
    {field} private opeGauche
    {field} private opeDroite
    public AffectationCaseCaseVarTemp(String p, String d, boolean var)
    publicgetCodeDecore()
  }
  AffectationCaseCaseVarTemp ---|> Affectation
  
  class AffectationSimple extends Affectation {
    {field} private opeGauche
    {field} private opeDroite
    public AffectationSimple(String p, String d)
    publicgetCodeDecore()
  }
  
  class AffectCaseCase {
    {field} private String opeGauche
    {field} private String opeDroite
    public AffectCaseCase(String p, String d, boolean var)
    public String getCodeDecore()
  }
  AffectCaseCase ---|> Affectation
  
  class AffectCaseVar extends Affectation {
    {field} private String opeGauche
    public AffectCaseVar(String p, boolean var)
    public String getCodeDecore()
  }
  
  class AffectEcrasementCaseCase extends Affectation {
    {field} private String opeGauche
    {field} private String opeDroite
    {field} private boolean execAnimation
    public AffectEcrasementCaseCase(String p, String d, boolean var)
    public String getCodeDecore()
  }
  
  class AffectVarCase extends Affectation {
    {field} private String opeDroite
    public AffectVarCase(String p, boolean var)
    public String getCodeDecore()
  }

  abstract class ArbreAbstrait {
    public abstract String getCodeDecore()
  }
  
  class BlocDInstruction extends ArbreAbstrait {
    public BlocDInstruction()
    public String getCodeDecore()
    public void ajouter(Instruction i)
  }
  BlocDInstruction -- "*" Instruction
  
  class CompaCaseCase {
    {field} private String opeGauche
    {field} private String comparateur
    {field} private String opeDroite
    {field} private BlocDInstructions instructionsAlors
    {field} private BlocDInstructions instructionsSinon
    public CompaCaseCase(String opeGauche, String compa, String opeDroite, BlocDInstructions alors, BlocDInstructions sinon, boolean var)
    public String getCodeDecore()
  }
  CompaCaseCase ---|> Conditionnelle
  
  class CompaCaseVar extends Conditionnelle {
    {field} private String opeGauche
    {field} private String comparateur
    {field} private BlocDInstructions instructionsAlors
    {field} private BlocDInstructions instructionsSinon
    public CompaCaseVar(String compa, String opeDroite, BlocDInstructions alors, BlocDInstructions sinon, boolean var)
    public String getCodeDecore()
  }
  
  class ComparaisonSimple {
    {field} private String operandeGauche
    {field} private String comparateur
    {field} private String operandeGauche
    {field} private BlocDInstructions instructionsAlors
    {field} private BlocDInstructions instructionsSinon
    public CompaCaseVar(String opGauche, String compa, String opeDroite, BlocDInstructions alors, BlocDInstructions sinon, boolean var)
    public String getCodeDecore()
  }
  ComparaisonSimple ---|> Conditionnelle
  
  class CompaVarCase extends Conditionnelle {
    {field} private String comparateur
    {field} private String opeDroite
    {field} private BlocDInstructions instructionsAlors
    {field} private BlocDInstructions instructionsSinon
    public CompaVarCase(String opeGauche, String compa, BlocDInstructions alors, BlocDInstructions sinon, boolean var)
    public String getCodeDecore()
  }
  
  class Conditionnelle extends Instruction {
  }
  
  class Declaration extends Instruction {
    {field} protected String nom
    {field} protected String type
    public Declaration(String type, String nom)
    public String getCodeDecore()
  }
  
  class DeclarationAvecAffectation extends Instruction {
    {field} private String type
    {field} private String nom
    {field} private String newVal
    public DeclarationAvecAffectation(String type, String nom, String newVal)
    public String getCodeDecore()
  }
  
  abstract class Instruction extends ArbreAbstrait {
  }
  
}

AlgoFacade -- "1" ArbreAbstrait
@enduml